(ns elliot.youtube-captions-downloader
  (:require [compojure.core :refer :all]
            [compojure.route :as route]
            [org.httpkit.client :as http]
            [cheshire.core :refer :all]
            [clojure.pprint :refer [pprint]]
            [compojure.core :only [defroutes GET POST DELETE ANY context]])
  (:use org.httpkit.server
        ring.middleware.params))

;;OAuth Constants
(def client-id "187737927310-3aqo536afr48i4u8vubo6hsugtuc2hcp.apps.googleusercontent.com")
(def auth-data (agent {:access-token nil}))

;;Youtube Access Constants
(def client-secret "XG5G89jCPt-L__-y1C3Vd3Eb")
(def youtube-key "AIzaSyARW-Zw7E34dS9jvTWYYXI-532ST9VXfGk" )
(def es-u-name "elliottsaidwhat")
(def strength-camp-u-name "strengthcamp")
(def batch-size 50)
(def next-page-token (atom {}))
(def elliot-vids (atom (read-string (slurp "video_ids"))))


(defn response->clj [response]
  (parse-string (:body response)))

(defn save-page-token [data playlist-id]
  (swap! next-page-token
         assoc playlist-id (get data "nextPageToken" :no-more-pages))
  data)

(defn playlist-id->next-page-token [playlist-id]
  (get @next-page-token playlist-id))

(defn assoc-in-page-token [playlist-id m]
  (let [token (playlist-id->next-page-token playlist-id)]
   (if (not (nil? token))
     (assoc m :pageToken token)
     m)))

(defn playlist-id->single-page-video-ids [playlist-id]
  (-> @(http/get "https://www.googleapis.com/youtube/v3/playlistItems"
                 {:query-params (assoc-in-page-token
                                 playlist-id
                                 {:part "snippet"
                                  :playlistId playlist-id
                                  :key youtube-key
                                  :maxResults batch-size})})
      response->clj
      (save-page-token playlist-id)
      (get "items")
      ((partial map #(get-in % ["snippet" "resourceId" "videoId"])))))


(defn playlist-id->video-ids [playlist-id]

  
   (while (not (= :no-more-pages (get @next-page-token playlist-id))) 
     (swap! elliot-vids (partial apply conj) (playlist-id->single-page-video-ids playlist-id))
     (Thread/sleep 15)))

(defn get-channel-uploads-playlist-id [username]
  (-> @(http/get "https://www.googleapis.com/youtube/v3/channels"
              {:query-params {:part "contentDetails"
                              :forUsername username
                              :key youtube-key}})
      response->clj
      (get-in ["items" 0 "contentDetails" "relatedPlaylists" "uploads"])))

(def elliot-playlist-id (get-channel-uploads-playlist-id es-u-name))
(def strength-camp-playlist-id (get-channel-uploads-playlist-id strength-camp-u-name))

(defn get-all-of-elliots-videos [] (playlist-id->video-ids elliot-playlist-id))

(defn get-all-of-strength-camp-videos [] (playlist-id->video-ids strength-camp-playlist-id))

(def strength-camp-video-ids (get-all-of-strength-camp-videos))

(defn video-id->caption-id [video-id]
  (-> @(http/get "https://www.googleapis.com/youtube/v3/captions"
                 {:query-params {:part "snippet"
                                 :videoId video-id
                                 :key youtube-key}})
      response->clj
      (get "items")
      ((partial filter #(= "en" (get-in % ["snippet" "language"]))))
      first))

(defn caption-id->caption-text [caption-id]
  @(http/get (str "https://www.googleapis.com/youtube/v3/captions/" caption-id)
             {:query-params {:key youtube-key}}))


(defn spit-youtube-urls [f id-set]
  ;;Write file if doesn't exit
  (spit f "")
  (doall
   (map
    #(spit f (str "https://www.youtube.com/watch?v=" % ",\n") :append true)
    id-set))
  :done)

(spit "strength-camp-video-ids" @elliot-vids)

